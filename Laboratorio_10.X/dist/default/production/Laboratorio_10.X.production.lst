

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Thu May 05 16:16:19 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.40
    24                           ; Generated 17/11/2021 GMT
    25                           ; 
    26                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  008F                     	;# 
   103  0090                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  0105                     	;# 
   122  0107                     	;# 
   123  0108                     	;# 
   124  0109                     	;# 
   125  010C                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  010F                     	;# 
   130  0185                     	;# 
   131  0187                     	;# 
   132  0188                     	;# 
   133  0189                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  008F                     	;# 
   181  0090                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0098                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  009F                     	;# 
   199  0105                     	;# 
   200  0107                     	;# 
   201  0108                     	;# 
   202  0109                     	;# 
   203  010C                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  0185                     	;# 
   209  0187                     	;# 
   210  0188                     	;# 
   211  0189                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  0019                     _TXREG	set	25
   215  000B                     _INTCONbits	set	11
   216  0018                     _RCSTAbits	set	24
   217  0005                     _PORTA	set	5
   218  0008                     _PORTD	set	8
   219  001E                     _ADRESH	set	30
   220  001F                     _ADCON0bits	set	31
   221  001A                     _RCREG	set	26
   222  000C                     _PIR1bits	set	12
   223  008C                     _PIE1bits	set	140
   224  009A                     _SPBRGH	set	154
   225  0099                     _SPBRG	set	153
   226  0098                     _TXSTAbits	set	152
   227  009F                     _ADCON1bits	set	159
   228  0088                     _TRISD	set	136
   229  0085                     _TRISA	set	133
   230  008F                     _OSCCONbits	set	143
   231  0187                     _BAUDCTLbits	set	391
   232  0189                     _ANSELH	set	393
   233  0188                     _ANSEL	set	392
   234                           
   235                           	psect	strings
   236  0161                     __pstrings:
   237  0161                     stringtab:
   238  0161                     __stringtab:
   239  0161                     stringcode:	
   240                           ;	String table - string pointers are 1 byte each
   241                           
   242  0161                     stringdir:
   243  0161  3001               	movlw	high stringdir
   244  0162  008A               	movwf	10
   245  0163  0804               	movf	4,w
   246  0164  0A84               	incf	4,f
   247  0165  0782               	addwf	2,f
   248  0166                     __stringbase:
   249  0166  3400               	retlw	0
   250  0167                     __end_of__stringtab:
   251  0167                     STR_1:
   252  0167  3431               	retlw	49	;'1'
   253  0168  342E               	retlw	46	;'.'
   254  0169  3420               	retlw	32	;' '
   255  016A  344C               	retlw	76	;'L'
   256  016B  3465               	retlw	101	;'e'
   257  016C  3465               	retlw	101	;'e'
   258  016D  3472               	retlw	114	;'r'
   259  016E  3420               	retlw	32	;' '
   260  016F  3450               	retlw	80	;'P'
   261  0170  346F               	retlw	111	;'o'
   262  0171  3474               	retlw	116	;'t'
   263  0172  3465               	retlw	101	;'e'
   264  0173  346E               	retlw	110	;'n'
   265  0174  3463               	retlw	99	;'c'
   266  0175  3469               	retlw	105	;'i'
   267  0176  346F               	retlw	111	;'o'
   268  0177  346D               	retlw	109	;'m'
   269  0178  3465               	retlw	101	;'e'
   270  0179  3474               	retlw	116	;'t'
   271  017A  3472               	retlw	114	;'r'
   272  017B  346F               	retlw	111	;'o'
   273  017C  340D               	retlw	13
   274  017D  3400               	retlw	0
   275  017E                     STR_5:
   276  017E  340D               	retlw	13
   277  017F  3449               	retlw	73	;'I'
   278  0180  346E               	retlw	110	;'n'
   279  0181  3467               	retlw	103	;'g'
   280  0182  3472               	retlw	114	;'r'
   281  0183  3465               	retlw	101	;'e'
   282  0184  3473               	retlw	115	;'s'
   283  0185  3461               	retlw	97	;'a'
   284  0186  3420               	retlw	32	;' '
   285  0187  3475               	retlw	117	;'u'
   286  0188  346E               	retlw	110	;'n'
   287  0189  3420               	retlw	32	;' '
   288  018A  3464               	retlw	100	;'d'
   289  018B  3461               	retlw	97	;'a'
   290  018C  3474               	retlw	116	;'t'
   291  018D  346F               	retlw	111	;'o'
   292  018E  340D               	retlw	13
   293  018F  3400               	retlw	0
   294  0190                     STR_2:
   295  0190  3432               	retlw	50	;'2'
   296  0191  342E               	retlw	46	;'.'
   297  0192  3420               	retlw	32	;' '
   298  0193  3445               	retlw	69	;'E'
   299  0194  346E               	retlw	110	;'n'
   300  0195  3476               	retlw	118	;'v'
   301  0196  3469               	retlw	105	;'i'
   302  0197  3461               	retlw	97	;'a'
   303  0198  3472               	retlw	114	;'r'
   304  0199  3420               	retlw	32	;' '
   305  019A  3441               	retlw	65	;'A'
   306  019B  3473               	retlw	115	;'s'
   307  019C  3463               	retlw	99	;'c'
   308  019D  3469               	retlw	105	;'i'
   309  019E  3469               	retlw	105	;'i'
   310  019F  340D               	retlw	13
   311  01A0  3400               	retlw	0
   312  01A1                     STR_4:
   313  01A1  340D               	retlw	13
   314  01A2  344C               	retlw	76	;'L'
   315  01A3  3469               	retlw	105	;'i'
   316  01A4  3473               	retlw	115	;'s'
   317  01A5  3474               	retlw	116	;'t'
   318  01A6  346F               	retlw	111	;'o'
   319  01A7  340D               	retlw	13
   320  01A8  340D               	retlw	13
   321  01A9  3400               	retlw	0
   322  01A8                     
   323                           	psect	cinit
   324  000F                     start_initialization:	
   325                           ; #config settings
   326                           
   327  000F                     __initialization:
   328                           
   329                           ; Clear objects allocated to COMMON
   330  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   331  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   332  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   333  0012  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   334                           
   335                           ; Clear objects allocated to BANK0
   336  0013  1283               	bcf	3,5	;RP0=0, select bank0
   337  0014  1303               	bcf	3,6	;RP1=0, select bank0
   338  0015  01AF               	clrf	__pbssBANK0& (0+127)
   339  0016  01B0               	clrf	(__pbssBANK0+1)& (0+127)
   340  0017  01B1               	clrf	(__pbssBANK0+2)& (0+127)
   341  0018                     end_of_initialization:	
   342                           ;End of C runtime variable initialization code
   343                           
   344  0018                     __end_of__initialization:
   345  0018  0183               	clrf	3
   346  0019  120A  118A  281C   	ljmp	_main	;jump to C main() function
   347                           
   348                           	psect	bssCOMMON
   349  0077                     __pbssCOMMON:
   350  0077                     _pot:
   351  0077                     	ds	1
   352  0078                     _centena:
   353  0078                     	ds	1
   354  0079                     _decena:
   355  0079                     	ds	1
   356  007A                     _unidad:
   357  007A                     	ds	1
   358                           
   359                           	psect	bssBANK0
   360  002F                     __pbssBANK0:
   361  002F                     _inicio:
   362  002F                     	ds	1
   363  0030                     _ASCII:
   364  0030                     	ds	1
   365  0031                     _indice:
   366  0031                     	ds	1
   367                           
   368                           	psect	cstackCOMMON
   369  0070                     __pcstackCOMMON:
   370  0070                     ?_setup:
   371  0070                     ?_Print:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_TX:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_isr:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ??_isr:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_main:	
   384                           ; 1 bytes @ 0x0
   385                           
   386                           
   387                           ; 1 bytes @ 0x0
   388  0070                     	ds	3
   389  0073                     ??_setup:
   390  0073                     ??_TX:	
   391                           ; 1 bytes @ 0x3
   392                           
   393  0073                     ?___bmul:	
   394                           ; 1 bytes @ 0x3
   395                           
   396  0073                     ?___wmul:	
   397                           ; 1 bytes @ 0x3
   398                           
   399  0073                     TX@dato:	
   400                           ; 2 bytes @ 0x3
   401                           
   402  0073                     ___bmul@multiplicand:	
   403                           ; 1 bytes @ 0x3
   404                           
   405  0073                     ___wmul@multiplier:	
   406                           ; 1 bytes @ 0x3
   407                           
   408                           
   409                           ; 2 bytes @ 0x3
   410  0073                     	ds	1
   411  0074                     ??_Print:
   412  0074                     ??___bmul:	
   413                           ; 1 bytes @ 0x4
   414                           
   415                           
   416                           ; 1 bytes @ 0x4
   417  0074                     	ds	1
   418  0075                     Print@str:
   419  0075                     ___bmul@product:	
   420                           ; 1 bytes @ 0x5
   421                           
   422  0075                     ___wmul@multiplicand:	
   423                           ; 1 bytes @ 0x5
   424                           
   425                           
   426                           ; 2 bytes @ 0x5
   427  0075                     	ds	1
   428  0076                     ___bmul@multiplier:
   429                           
   430                           ; 1 bytes @ 0x6
   431  0076                     	ds	1
   432  0077                     ??___wmul:
   433                           
   434                           	psect	cstackBANK0
   435  0020                     __pcstackBANK0:	
   436                           ; 1 bytes @ 0x7
   437                           
   438  0020                     ___wmul@product:
   439                           
   440                           ; 2 bytes @ 0x0
   441  0020                     	ds	2
   442  0022                     ?___awdiv:
   443  0022                     ___awdiv@divisor:	
   444                           ; 2 bytes @ 0x2
   445                           
   446                           
   447                           ; 2 bytes @ 0x2
   448  0022                     	ds	2
   449  0024                     ___awdiv@dividend:
   450                           
   451                           ; 2 bytes @ 0x4
   452  0024                     	ds	2
   453  0026                     ??___awdiv:
   454                           
   455                           ; 1 bytes @ 0x6
   456  0026                     	ds	1
   457  0027                     ___awdiv@counter:
   458                           
   459                           ; 1 bytes @ 0x7
   460  0027                     	ds	1
   461  0028                     ___awdiv@sign:
   462                           
   463                           ; 1 bytes @ 0x8
   464  0028                     	ds	1
   465  0029                     ___awdiv@quotient:
   466                           
   467                           ; 2 bytes @ 0x9
   468  0029                     	ds	2
   469  002B                     ??_main:
   470                           
   471                           ; 1 bytes @ 0xB
   472  002B                     	ds	4
   473                           
   474                           	psect	maintext
   475  001C                     __pmaintext:	
   476 ;;
   477 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   478 ;;
   479 ;; *************** function _main *****************
   480 ;; Defined at:
   481 ;;		line 48 in file "USART.c"
   482 ;; Parameters:    Size  Location     Type
   483 ;;		None
   484 ;; Auto vars:     Size  Location     Type
   485 ;;		None
   486 ;; Return value:  Size  Location     Type
   487 ;;                  1    wreg      void 
   488 ;; Registers used:
   489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   490 ;; Tracked objects:
   491 ;;		On entry : B00/0
   492 ;;		On exit  : 0/0
   493 ;;		Unchanged: 0/0
   494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   495 ;;      Params:         0       0       0       0       0
   496 ;;      Locals:         0       0       0       0       0
   497 ;;      Temps:          0       4       0       0       0
   498 ;;      Totals:         0       4       0       0       0
   499 ;;Total ram usage:        4 bytes
   500 ;; Hardware stack levels required when called: 3
   501 ;; This function calls:
   502 ;;		_Print
   503 ;;		_TX
   504 ;;		___awdiv
   505 ;;		___bmul
   506 ;;		___wmul
   507 ;;		_setup
   508 ;; This function is called by:
   509 ;;		Startup code after reset
   510 ;; This function uses a non-reentrant model
   511 ;;
   512                           
   513  001C                     _main:	
   514                           ;psect for function _main
   515                           
   516  001C                     l1222:	
   517                           ;incstack = 0
   518                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   519                           
   520                           
   521                           ;USART.c: 49:     setup();
   522  001C  120A  118A  21AA  120A  118A  	fcall	_setup
   523  0021                     l1224:
   524                           
   525                           ;USART.c: 52:         if(ADCON0bits.GO == 0){
   526  0021  1283               	bcf	3,5	;RP0=0, select bank0
   527  0022  1303               	bcf	3,6	;RP1=0, select bank0
   528  0023  189F               	btfsc	31,1	;volatile
   529  0024  2826               	goto	u651
   530  0025  2827               	goto	u650
   531  0026                     u651:
   532  0026  2828               	goto	l1228
   533  0027                     u650:
   534  0027                     l1226:
   535                           
   536                           ;USART.c: 53:             ADCON0bits.GO = 1;
   537  0027  149F               	bsf	31,1	;volatile
   538  0028                     l1228:
   539                           
   540                           ;USART.c: 56:         centena = pot/100;
   541  0028  3064               	movlw	100
   542  0029  00A2               	movwf	___awdiv@divisor
   543  002A  3000               	movlw	0
   544  002B  00A3               	movwf	___awdiv@divisor+1
   545  002C  0877               	movf	_pot,w
   546  002D  00AB               	movwf	??_main
   547  002E  01AC               	clrf	??_main+1
   548  002F  082B               	movf	??_main,w
   549  0030  00A4               	movwf	___awdiv@dividend
   550  0031  082C               	movf	??_main+1,w
   551  0032  00A5               	movwf	___awdiv@dividend+1
   552  0033  120A  118A  20F8  120A  118A  	fcall	___awdiv
   553  0038  1283               	bcf	3,5	;RP0=0, select bank0
   554  0039  1303               	bcf	3,6	;RP1=0, select bank0
   555  003A  0822               	movf	?___awdiv,w
   556  003B  00AD               	movwf	??_main+2
   557  003C  082D               	movf	??_main+2,w
   558  003D  00F8               	movwf	_centena
   559                           
   560                           ;USART.c: 57:         decena = (pot - (100 * centena))/10;
   561  003E  300A               	movlw	10
   562  003F  00A2               	movwf	___awdiv@divisor
   563  0040  3000               	movlw	0
   564  0041  00A3               	movwf	___awdiv@divisor+1
   565  0042  0878               	movf	_centena,w
   566  0043  00AB               	movwf	??_main
   567  0044  01AC               	clrf	??_main+1
   568  0045  082B               	movf	??_main,w
   569  0046  00F3               	movwf	___wmul@multiplier
   570  0047  082C               	movf	??_main+1,w
   571  0048  00F4               	movwf	___wmul@multiplier+1
   572  0049  309C               	movlw	156
   573  004A  00F5               	movwf	___wmul@multiplicand
   574  004B  30FF               	movlw	255
   575  004C  00F6               	movwf	___wmul@multiplicand+1
   576  004D  120A  118A  21EF  120A  118A  	fcall	___wmul
   577  0052  0877               	movf	_pot,w
   578  0053  0773               	addwf	?___wmul,w
   579  0054  1283               	bcf	3,5	;RP0=0, select bank0
   580  0055  1303               	bcf	3,6	;RP1=0, select bank0
   581  0056  00A4               	movwf	___awdiv@dividend
   582  0057  0874               	movf	?___wmul+1,w
   583  0058  1803               	skipnc
   584  0059  0A74               	incf	?___wmul+1,w
   585  005A  00A5               	movwf	___awdiv@dividend+1
   586  005B  120A  118A  20F8  120A  118A  	fcall	___awdiv
   587  0060  1283               	bcf	3,5	;RP0=0, select bank0
   588  0061  1303               	bcf	3,6	;RP1=0, select bank0
   589  0062  0822               	movf	?___awdiv,w
   590  0063  00AD               	movwf	??_main+2
   591  0064  082D               	movf	??_main+2,w
   592  0065  00F9               	movwf	_decena
   593                           
   594                           ;USART.c: 58:         unidad = pot - (100 * centena)-(10 * decena);
   595  0066  309C               	movlw	156
   596  0067  00AB               	movwf	??_main
   597  0068  082B               	movf	??_main,w
   598  0069  00F3               	movwf	___bmul@multiplicand
   599  006A  0878               	movf	_centena,w
   600  006B  120A  118A  225E  120A  118A  	fcall	___bmul
   601  0070  1283               	bcf	3,5	;RP0=0, select bank0
   602  0071  1303               	bcf	3,6	;RP1=0, select bank0
   603  0072  00AC               	movwf	??_main+1
   604  0073  30F6               	movlw	246
   605  0074  00AD               	movwf	??_main+2
   606  0075  082D               	movf	??_main+2,w
   607  0076  00F3               	movwf	___bmul@multiplicand
   608  0077  0879               	movf	_decena,w
   609  0078  120A  118A  225E  120A  118A  	fcall	___bmul
   610  007D  1283               	bcf	3,5	;RP0=0, select bank0
   611  007E  1303               	bcf	3,6	;RP1=0, select bank0
   612  007F  072C               	addwf	??_main+1,w
   613  0080  0777               	addwf	_pot,w
   614  0081  00AE               	movwf	??_main+3
   615  0082  082E               	movf	??_main+3,w
   616  0083  00FA               	movwf	_unidad
   617  0084                     l1230:
   618                           
   619                           ;USART.c: 60:         centena += 48;
   620  0084  3030               	movlw	48
   621  0085  00AB               	movwf	??_main
   622  0086  082B               	movf	??_main,w
   623  0087  07F8               	addwf	_centena,f
   624  0088                     l1232:
   625                           
   626                           ;USART.c: 61:         decena += 48;
   627  0088  3030               	movlw	48
   628  0089  00AB               	movwf	??_main
   629  008A  082B               	movf	??_main,w
   630  008B  07F9               	addwf	_decena,f
   631  008C                     l1234:
   632                           
   633                           ;USART.c: 62:         unidad += 48;
   634  008C  3030               	movlw	48
   635  008D  00AB               	movwf	??_main
   636  008E  082B               	movf	??_main,w
   637  008F  07FA               	addwf	_unidad,f
   638  0090                     l1236:
   639                           
   640                           ;USART.c: 64:         if(inicio==0){
   641  0090  082F               	movf	_inicio,w
   642  0091  1D03               	btfss	3,2
   643  0092  2894               	goto	u661
   644  0093  2895               	goto	u660
   645  0094                     u661:
   646  0094  28A5               	goto	l1242
   647  0095                     u660:
   648  0095                     l1238:
   649                           
   650                           ;USART.c: 65:             Print("1. Leer Potenciometro\r");
   651  0095  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   652  0096  120A  118A  223F  120A  118A  	fcall	_Print
   653                           
   654                           ;USART.c: 66:             Print("2. Enviar Ascii\r");
   655  009B  302A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   656  009C  120A  118A  223F  120A  118A  	fcall	_Print
   657  00A1                     l1240:
   658                           
   659                           ;USART.c: 67:             inicio = 1;
   660  00A1  1283               	bcf	3,5	;RP0=0, select bank0
   661  00A2  1303               	bcf	3,6	;RP1=0, select bank0
   662  00A3  01AF               	clrf	_inicio
   663  00A4  0AAF               	incf	_inicio,f
   664  00A5                     l1242:
   665                           
   666                           ;USART.c: 70:         if(PIR1bits.RCIF == 0){
   667  00A5  1A8C               	btfsc	12,5	;volatile
   668  00A6  28A8               	goto	u671
   669  00A7  28A9               	goto	u670
   670  00A8                     u671:
   671  00A8  2821               	goto	l1224
   672  00A9                     u670:
   673  00A9  28E5               	goto	l1276
   674  00AA                     l1246:
   675                           
   676                           ;USART.c: 73:                     Print("\r");
   677  00AA  3042               	movlw	(low (((STR_4+7)-__stringbase)| (0+32768)))& (0+255)
   678  00AB  120A  118A  223F  120A  118A  	fcall	_Print
   679  00B0                     l1248:
   680                           
   681                           ;USART.c: 74:                     TX(centena);
   682  00B0  0878               	movf	_centena,w
   683  00B1  120A  118A  2273  120A  118A  	fcall	_TX
   684  00B6                     l1250:
   685                           
   686                           ;USART.c: 75:                     TX(decena);
   687  00B6  0879               	movf	_decena,w
   688  00B7  120A  118A  2273  120A  118A  	fcall	_TX
   689  00BC                     l1252:
   690                           
   691                           ;USART.c: 76:                     TX(unidad);
   692  00BC  087A               	movf	_unidad,w
   693  00BD  120A  118A  2273  120A  118A  	fcall	_TX
   694  00C2                     l1254:
   695                           
   696                           ;USART.c: 77:                     Print("\rListo\r\r");
   697  00C2  303B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   698  00C3  120A  118A  223F  120A  118A  	fcall	_Print
   699  00C8                     l1256:
   700                           
   701                           ;USART.c: 78:                     inicio = 0;
   702  00C8  1283               	bcf	3,5	;RP0=0, select bank0
   703  00C9  1303               	bcf	3,6	;RP1=0, select bank0
   704  00CA  01AF               	clrf	_inicio
   705  00CB                     l1258:
   706                           
   707                           ;USART.c: 79:                     indice = 0;
   708  00CB  01B1               	clrf	_indice
   709                           
   710                           ;USART.c: 80:                     break;
   711  00CC  2821               	goto	l1224
   712  00CD                     l1260:
   713                           
   714                           ;USART.c: 83:                     Print("\rIngresa un dato\r");
   715  00CD  3018               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   716  00CE  120A  118A  223F  120A  118A  	fcall	_Print
   717  00D3                     l1262:
   718                           
   719                           ;USART.c: 84:                     ASCII = 1;
   720  00D3  1283               	bcf	3,5	;RP0=0, select bank0
   721  00D4  1303               	bcf	3,6	;RP1=0, select bank0
   722  00D5  01B0               	clrf	_ASCII
   723  00D6  0AB0               	incf	_ASCII,f
   724  00D7                     l1264:	
   725                           ;USART.c: 85:                     while(ASCII ==1);
   726                           
   727  00D7  0330               	decf	_ASCII,w
   728  00D8  1903               	btfsc	3,2
   729  00D9  28DB               	goto	u681
   730  00DA  28DC               	goto	u680
   731  00DB                     u681:
   732  00DB  28D7               	goto	l1264
   733  00DC                     u680:
   734  00DC                     l1266:
   735                           
   736                           ;USART.c: 88:                     PORTD = RCREG;
   737  00DC  081A               	movf	26,w	;volatile
   738  00DD  0088               	movwf	8	;volatile
   739  00DE                     l1268:
   740                           
   741                           ;USART.c: 89:                     Print("Listo\r\r");
   742  00DE  303C               	movlw	(low (((STR_4+1)-__stringbase)| (0+32768)))& (0+255)
   743  00DF  120A  118A  223F  120A  118A  	fcall	_Print
   744  00E4  28C8               	goto	l1256
   745  00E5                     l1276:
   746  00E5  0831               	movf	_indice,w
   747  00E6  00AB               	movwf	??_main
   748  00E7  01AC               	clrf	??_main+1
   749                           
   750                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   751                           ; Switch size 1, requested type "simple"
   752                           ; Number of cases is 1, Range of values is 0 to 0
   753                           ; switch strategies available:
   754                           ; Name         Instructions Cycles
   755                           ; simple_byte            4     3 (average)
   756                           ; direct_byte           11     8 (fixed)
   757                           ; jumptable            260     6 (fixed)
   758                           ;	Chosen strategy is simple_byte
   759  00E8  082C               	movf	??_main+1,w
   760  00E9  3A00               	xorlw	0	; case 0
   761  00EA  1903               	skipnz
   762  00EB  28ED               	goto	l1302
   763  00EC  2821               	goto	l1224
   764  00ED                     l1302:
   765                           
   766                           ; Switch size 1, requested type "simple"
   767                           ; Number of cases is 2, Range of values is 49 to 50
   768                           ; switch strategies available:
   769                           ; Name         Instructions Cycles
   770                           ; simple_byte            7     4 (average)
   771                           ; direct_byte           17    11 (fixed)
   772                           ; jumptable            263     9 (fixed)
   773                           ;	Chosen strategy is simple_byte
   774  00ED  082B               	movf	??_main,w
   775  00EE  3A31               	xorlw	49	; case 49
   776  00EF  1903               	skipnz
   777  00F0  28AA               	goto	l1246
   778  00F1  3A03               	xorlw	3	; case 50
   779  00F2  1903               	skipnz
   780  00F3  28CD               	goto	l1260
   781  00F4  2821               	goto	l1224
   782  00F5  120A  118A  280C   	ljmp	start
   783  00F8                     __end_of_main:
   784                           
   785                           	psect	text1
   786  01AA                     __ptext1:	
   787 ;; *************** function _setup *****************
   788 ;; Defined at:
   789 ;;		line 99 in file "USART.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		wreg, status,2, status,0
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   803 ;;      Params:         0       0       0       0       0
   804 ;;      Locals:         0       0       0       0       0
   805 ;;      Temps:          1       0       0       0       0
   806 ;;      Totals:         1       0       0       0       0
   807 ;;Total ram usage:        1 bytes
   808 ;; Hardware stack levels used: 1
   809 ;; Hardware stack levels required when called: 1
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_main
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817  01AA                     _setup:	
   818                           ;psect for function _setup
   819                           
   820  01AA                     l934:	
   821                           ;incstack = 0
   822                           ; Regs used in _setup: [wreg+status,2+status,0]
   823                           
   824                           
   825                           ;USART.c: 101:     ANSEL =0b00000001;
   826  01AA  3001               	movlw	1
   827  01AB  1683               	bsf	3,5	;RP0=1, select bank3
   828  01AC  1703               	bsf	3,6	;RP1=1, select bank3
   829  01AD  0088               	movwf	8	;volatile
   830  01AE                     l936:
   831                           
   832                           ;USART.c: 102:     ANSELH = 0x00;
   833  01AE  0189               	clrf	9	;volatile
   834  01AF                     l938:
   835                           
   836                           ;USART.c: 104:     OSCCONbits.IRCF = 0b0100;
   837  01AF  1683               	bsf	3,5	;RP0=1, select bank1
   838  01B0  1303               	bcf	3,6	;RP1=0, select bank1
   839  01B1  080F               	movf	15,w	;volatile
   840  01B2  398F               	andlw	-113
   841  01B3  3840               	iorlw	64
   842  01B4  008F               	movwf	15	;volatile
   843  01B5                     l940:
   844                           
   845                           ;USART.c: 105:     OSCCONbits.SCS = 1;
   846  01B5  140F               	bsf	15,0	;volatile
   847  01B6                     l942:
   848                           
   849                           ;USART.c: 107:     TRISA = 0b00000001;
   850  01B6  3001               	movlw	1
   851  01B7  0085               	movwf	5	;volatile
   852  01B8                     l944:
   853                           
   854                           ;USART.c: 108:     TRISD = 0x00;
   855  01B8  0188               	clrf	8	;volatile
   856  01B9                     l946:
   857                           
   858                           ;USART.c: 109:     PORTD = 0x00;
   859  01B9  1283               	bcf	3,5	;RP0=0, select bank0
   860  01BA  1303               	bcf	3,6	;RP1=0, select bank0
   861  01BB  0188               	clrf	8	;volatile
   862  01BC                     l948:
   863                           
   864                           ;USART.c: 110:     PORTA = 0x00;
   865  01BC  0185               	clrf	5	;volatile
   866                           
   867                           ;USART.c: 113:     ADCON0bits.ADCS = 0b00;
   868  01BD  303F               	movlw	-193
   869  01BE  059F               	andwf	31,f	;volatile
   870  01BF                     l950:
   871                           
   872                           ;USART.c: 115:     ADCON1bits.VCFG0 = 0;
   873  01BF  1683               	bsf	3,5	;RP0=1, select bank1
   874  01C0  1303               	bcf	3,6	;RP1=0, select bank1
   875  01C1  121F               	bcf	31,4	;volatile
   876  01C2                     l952:
   877                           
   878                           ;USART.c: 116:     ADCON1bits.VCFG1 = 1;
   879  01C2  169F               	bsf	31,5	;volatile
   880                           
   881                           ;USART.c: 118:     ADCON0bits.CHS = 0b0000;
   882  01C3  30C3               	movlw	-61
   883  01C4  1283               	bcf	3,5	;RP0=0, select bank0
   884  01C5  1303               	bcf	3,6	;RP1=0, select bank0
   885  01C6  059F               	andwf	31,f	;volatile
   886  01C7                     l954:
   887                           
   888                           ;USART.c: 119:     ADCON1bits.ADFM = 0;
   889  01C7  1683               	bsf	3,5	;RP0=1, select bank1
   890  01C8  1303               	bcf	3,6	;RP1=0, select bank1
   891  01C9  139F               	bcf	31,7	;volatile
   892  01CA                     l956:
   893                           
   894                           ;USART.c: 120:     ADCON0bits.ADON = 1;
   895  01CA  1283               	bcf	3,5	;RP0=0, select bank0
   896  01CB  1303               	bcf	3,6	;RP1=0, select bank0
   897  01CC  141F               	bsf	31,0	;volatile
   898  01CD                     l958:
   899                           
   900                           ;USART.c: 121:     _delay((unsigned long)((40)*(1000000/4000000.0)));
   901  01CD  3003               	movlw	3
   902  01CE  00F3               	movwf	??_setup
   903  01CF                     u697:
   904  01CF  0BF3               	decfsz	??_setup,f
   905  01D0  29CF               	goto	u697
   906  01D1                     l960:
   907                           
   908                           ;USART.c: 124:     TXSTAbits.SYNC = 0;
   909  01D1  1683               	bsf	3,5	;RP0=1, select bank1
   910  01D2  1303               	bcf	3,6	;RP1=0, select bank1
   911  01D3  1218               	bcf	24,4	;volatile
   912  01D4                     l962:
   913                           
   914                           ;USART.c: 125:     TXSTAbits.BRGH = 1;
   915  01D4  1518               	bsf	24,2	;volatile
   916  01D5                     l964:
   917                           
   918                           ;USART.c: 126:     BAUDCTLbits.BRG16 = 1;
   919  01D5  1683               	bsf	3,5	;RP0=1, select bank3
   920  01D6  1703               	bsf	3,6	;RP1=1, select bank3
   921  01D7  1587               	bsf	7,3	;volatile
   922  01D8                     l966:
   923                           
   924                           ;USART.c: 128:     SPBRG = 25;
   925  01D8  3019               	movlw	25
   926  01D9  1683               	bsf	3,5	;RP0=1, select bank1
   927  01DA  1303               	bcf	3,6	;RP1=0, select bank1
   928  01DB  0099               	movwf	25	;volatile
   929  01DC                     l968:
   930                           
   931                           ;USART.c: 129:     SPBRGH = 0;
   932  01DC  019A               	clrf	26	;volatile
   933  01DD                     l970:
   934                           
   935                           ;USART.c: 131:     RCSTAbits.SPEN = 1;
   936  01DD  1283               	bcf	3,5	;RP0=0, select bank0
   937  01DE  1303               	bcf	3,6	;RP1=0, select bank0
   938  01DF  1798               	bsf	24,7	;volatile
   939  01E0                     l972:
   940                           
   941                           ;USART.c: 132:     TXSTAbits.TX9 = 0;
   942  01E0  1683               	bsf	3,5	;RP0=1, select bank1
   943  01E1  1303               	bcf	3,6	;RP1=0, select bank1
   944  01E2  1318               	bcf	24,6	;volatile
   945  01E3                     l974:
   946                           
   947                           ;USART.c: 133:     TXSTAbits.TXEN = 1;
   948  01E3  1698               	bsf	24,5	;volatile
   949  01E4                     l976:
   950                           
   951                           ;USART.c: 134:     RCSTAbits.CREN = 1;
   952  01E4  1283               	bcf	3,5	;RP0=0, select bank0
   953  01E5  1303               	bcf	3,6	;RP1=0, select bank0
   954  01E6  1618               	bsf	24,4	;volatile
   955  01E7                     l978:
   956                           
   957                           ;USART.c: 136:     PIR1bits.ADIF = 0;
   958  01E7  130C               	bcf	12,6	;volatile
   959  01E8                     l980:
   960                           
   961                           ;USART.c: 137:     PIE1bits.ADIE = 1;
   962  01E8  1683               	bsf	3,5	;RP0=1, select bank1
   963  01E9  1303               	bcf	3,6	;RP1=0, select bank1
   964  01EA  170C               	bsf	12,6	;volatile
   965  01EB                     l982:
   966                           
   967                           ;USART.c: 138:     INTCONbits.PEIE = 1;
   968  01EB  170B               	bsf	11,6	;volatile
   969  01EC                     l984:
   970                           
   971                           ;USART.c: 139:     INTCONbits.GIE = 1;
   972  01EC  178B               	bsf	11,7	;volatile
   973  01ED                     l986:
   974                           
   975                           ;USART.c: 140:     PIE1bits.RCIE = 1;
   976  01ED  168C               	bsf	12,5	;volatile
   977  01EE                     l92:
   978  01EE  0008               	return
   979  01EF                     __end_of_setup:
   980                           
   981                           	psect	text2
   982  01EF                     __ptext2:	
   983 ;; *************** function ___wmul *****************
   984 ;; Defined at:
   985 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul16.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;  multiplier      2    3[COMMON] unsigned int 
   988 ;;  multiplicand    2    5[COMMON] unsigned int 
   989 ;; Auto vars:     Size  Location     Type
   990 ;;  product         2    0[BANK0 ] unsigned int 
   991 ;; Return value:  Size  Location     Type
   992 ;;                  2    3[COMMON] unsigned int 
   993 ;; Registers used:
   994 ;;		wreg, status,2, status,0
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1000 ;;      Params:         4       0       0       0       0
  1001 ;;      Locals:         0       2       0       0       0
  1002 ;;      Temps:          0       0       0       0       0
  1003 ;;      Totals:         4       2       0       0       0
  1004 ;;Total ram usage:        6 bytes
  1005 ;; Hardware stack levels used: 1
  1006 ;; Hardware stack levels required when called: 1
  1007 ;; This function calls:
  1008 ;;		Nothing
  1009 ;; This function is called by:
  1010 ;;		_main
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014  01EF                     ___wmul:	
  1015                           ;psect for function ___wmul
  1016                           
  1017  01EF                     l1164:	
  1018                           ;incstack = 0
  1019                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1020                           
  1021  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  1022  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  1023  01F1  01A0               	clrf	___wmul@product
  1024  01F2  01A1               	clrf	___wmul@product+1
  1025  01F3                     l1166:
  1026  01F3  1C73               	btfss	___wmul@multiplier,0
  1027  01F4  29F6               	goto	u511
  1028  01F5  29F7               	goto	u510
  1029  01F6                     u511:
  1030  01F6  29FF               	goto	l190
  1031  01F7                     u510:
  1032  01F7                     l1168:
  1033  01F7  0875               	movf	___wmul@multiplicand,w
  1034  01F8  1283               	bcf	3,5	;RP0=0, select bank0
  1035  01F9  1303               	bcf	3,6	;RP1=0, select bank0
  1036  01FA  07A0               	addwf	___wmul@product,f
  1037  01FB  1803               	skipnc
  1038  01FC  0AA1               	incf	___wmul@product+1,f
  1039  01FD  0876               	movf	___wmul@multiplicand+1,w
  1040  01FE  07A1               	addwf	___wmul@product+1,f
  1041  01FF                     l190:
  1042  01FF  3001               	movlw	1
  1043  0200                     u525:
  1044  0200  1003               	clrc
  1045  0201  0DF5               	rlf	___wmul@multiplicand,f
  1046  0202  0DF6               	rlf	___wmul@multiplicand+1,f
  1047  0203  3EFF               	addlw	-1
  1048  0204  1D03               	skipz
  1049  0205  2A00               	goto	u525
  1050  0206                     l1170:
  1051  0206  3001               	movlw	1
  1052  0207                     u535:
  1053  0207  1003               	clrc
  1054  0208  0CF4               	rrf	___wmul@multiplier+1,f
  1055  0209  0CF3               	rrf	___wmul@multiplier,f
  1056  020A  3EFF               	addlw	-1
  1057  020B  1D03               	skipz
  1058  020C  2A07               	goto	u535
  1059  020D                     l1172:
  1060  020D  0873               	movf	___wmul@multiplier,w
  1061  020E  0474               	iorwf	___wmul@multiplier+1,w
  1062  020F  1D03               	btfss	3,2
  1063  0210  2A12               	goto	u541
  1064  0211  2A13               	goto	u540
  1065  0212                     u541:
  1066  0212  29F3               	goto	l1166
  1067  0213                     u540:
  1068  0213                     l1174:
  1069  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1070  0214  1303               	bcf	3,6	;RP1=0, select bank0
  1071  0215  0821               	movf	___wmul@product+1,w
  1072  0216  00F4               	movwf	?___wmul+1
  1073  0217  0820               	movf	___wmul@product,w
  1074  0218  00F3               	movwf	?___wmul
  1075  0219                     l192:
  1076  0219  0008               	return
  1077  021A                     __end_of___wmul:
  1078                           
  1079                           	psect	text3
  1080  025E                     __ptext3:	
  1081 ;; *************** function ___bmul *****************
  1082 ;; Defined at:
  1083 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul8.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;  multiplier      1    wreg     unsigned char 
  1086 ;;  multiplicand    1    3[COMMON] unsigned char 
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;  multiplier      1    6[COMMON] unsigned char 
  1089 ;;  product         1    5[COMMON] unsigned char 
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  1    wreg      unsigned char 
  1092 ;; Registers used:
  1093 ;;		wreg, status,2, status,0
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1099 ;;      Params:         1       0       0       0       0
  1100 ;;      Locals:         2       0       0       0       0
  1101 ;;      Temps:          1       0       0       0       0
  1102 ;;      Totals:         4       0       0       0       0
  1103 ;;Total ram usage:        4 bytes
  1104 ;; Hardware stack levels used: 1
  1105 ;; Hardware stack levels required when called: 1
  1106 ;; This function calls:
  1107 ;;		Nothing
  1108 ;; This function is called by:
  1109 ;;		_main
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113  025E                     ___bmul:	
  1114                           ;psect for function ___bmul
  1115                           
  1116                           
  1117                           ;incstack = 0
  1118                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1119                           ;___bmul@multiplier stored from wreg
  1120  025E  00F6               	movwf	___bmul@multiplier
  1121  025F                     l1012:
  1122  025F  01F5               	clrf	___bmul@product
  1123  0260                     l1014:
  1124  0260  1C76               	btfss	___bmul@multiplier,0
  1125  0261  2A63               	goto	u321
  1126  0262  2A64               	goto	u320
  1127  0263                     u321:
  1128  0263  2A68               	goto	l1018
  1129  0264                     u320:
  1130  0264                     l1016:
  1131  0264  0873               	movf	___bmul@multiplicand,w
  1132  0265  00F4               	movwf	??___bmul
  1133  0266  0874               	movf	??___bmul,w
  1134  0267  07F5               	addwf	___bmul@product,f
  1135  0268                     l1018:
  1136  0268  1003               	clrc
  1137  0269  0DF3               	rlf	___bmul@multiplicand,f
  1138  026A                     l1020:
  1139  026A  1003               	clrc
  1140  026B  0CF6               	rrf	___bmul@multiplier,f
  1141  026C  0876               	movf	___bmul@multiplier,w
  1142  026D  1D03               	btfss	3,2
  1143  026E  2A70               	goto	u331
  1144  026F  2A71               	goto	u330
  1145  0270                     u331:
  1146  0270  2A60               	goto	l1014
  1147  0271                     u330:
  1148  0271                     l1022:
  1149  0271  0875               	movf	___bmul@product,w
  1150  0272                     l216:
  1151  0272  0008               	return
  1152  0273                     __end_of___bmul:
  1153                           
  1154                           	psect	text4
  1155  00F8                     __ptext4:	
  1156 ;; *************** function ___awdiv *****************
  1157 ;; Defined at:
  1158 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\awdiv.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  divisor         2    2[BANK0 ] int 
  1161 ;;  dividend        2    4[BANK0 ] int 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  quotient        2    9[BANK0 ] int 
  1164 ;;  sign            1    8[BANK0 ] unsigned char 
  1165 ;;  counter         1    7[BANK0 ] unsigned char 
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  2    2[BANK0 ] int 
  1168 ;; Registers used:
  1169 ;;		wreg, status,2, status,0
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1175 ;;      Params:         0       4       0       0       0
  1176 ;;      Locals:         0       4       0       0       0
  1177 ;;      Temps:          0       1       0       0       0
  1178 ;;      Totals:         0       9       0       0       0
  1179 ;;Total ram usage:        9 bytes
  1180 ;; Hardware stack levels used: 1
  1181 ;; Hardware stack levels required when called: 1
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_main
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189  00F8                     ___awdiv:	
  1190                           ;psect for function ___awdiv
  1191                           
  1192  00F8                     l1178:	
  1193                           ;incstack = 0
  1194                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1195                           
  1196  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  1197  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  1198  00FA  01A8               	clrf	___awdiv@sign
  1199  00FB                     l1180:
  1200  00FB  1FA3               	btfss	___awdiv@divisor+1,7
  1201  00FC  28FE               	goto	u551
  1202  00FD  28FF               	goto	u550
  1203  00FE                     u551:
  1204  00FE  2906               	goto	l1186
  1205  00FF                     u550:
  1206  00FF                     l1182:
  1207  00FF  09A2               	comf	___awdiv@divisor,f
  1208  0100  09A3               	comf	___awdiv@divisor+1,f
  1209  0101  0AA2               	incf	___awdiv@divisor,f
  1210  0102  1903               	skipnz
  1211  0103  0AA3               	incf	___awdiv@divisor+1,f
  1212  0104                     l1184:
  1213  0104  01A8               	clrf	___awdiv@sign
  1214  0105  0AA8               	incf	___awdiv@sign,f
  1215  0106                     l1186:
  1216  0106  1FA5               	btfss	___awdiv@dividend+1,7
  1217  0107  2909               	goto	u561
  1218  0108  290A               	goto	u560
  1219  0109                     u561:
  1220  0109  2913               	goto	l1192
  1221  010A                     u560:
  1222  010A                     l1188:
  1223  010A  09A4               	comf	___awdiv@dividend,f
  1224  010B  09A5               	comf	___awdiv@dividend+1,f
  1225  010C  0AA4               	incf	___awdiv@dividend,f
  1226  010D  1903               	skipnz
  1227  010E  0AA5               	incf	___awdiv@dividend+1,f
  1228  010F                     l1190:
  1229  010F  3001               	movlw	1
  1230  0110  00A6               	movwf	??___awdiv
  1231  0111  0826               	movf	??___awdiv,w
  1232  0112  06A8               	xorwf	___awdiv@sign,f
  1233  0113                     l1192:
  1234  0113  01A9               	clrf	___awdiv@quotient
  1235  0114  01AA               	clrf	___awdiv@quotient+1
  1236  0115                     l1194:
  1237  0115  0822               	movf	___awdiv@divisor,w
  1238  0116  0423               	iorwf	___awdiv@divisor+1,w
  1239  0117  1903               	btfsc	3,2
  1240  0118  291A               	goto	u571
  1241  0119  291B               	goto	u570
  1242  011A                     u571:
  1243  011A  2952               	goto	l1214
  1244  011B                     u570:
  1245  011B                     l1196:
  1246  011B  01A7               	clrf	___awdiv@counter
  1247  011C  0AA7               	incf	___awdiv@counter,f
  1248  011D  2929               	goto	l1202
  1249  011E                     l1198:
  1250  011E  3001               	movlw	1
  1251  011F                     u585:
  1252  011F  1003               	clrc
  1253  0120  0DA2               	rlf	___awdiv@divisor,f
  1254  0121  0DA3               	rlf	___awdiv@divisor+1,f
  1255  0122  3EFF               	addlw	-1
  1256  0123  1D03               	skipz
  1257  0124  291F               	goto	u585
  1258  0125                     l1200:
  1259  0125  3001               	movlw	1
  1260  0126  00A6               	movwf	??___awdiv
  1261  0127  0826               	movf	??___awdiv,w
  1262  0128  07A7               	addwf	___awdiv@counter,f
  1263  0129                     l1202:
  1264  0129  1FA3               	btfss	___awdiv@divisor+1,7
  1265  012A  292C               	goto	u591
  1266  012B  292D               	goto	u590
  1267  012C                     u591:
  1268  012C  291E               	goto	l1198
  1269  012D                     u590:
  1270  012D                     l1204:
  1271  012D  3001               	movlw	1
  1272  012E                     u605:
  1273  012E  1003               	clrc
  1274  012F  0DA9               	rlf	___awdiv@quotient,f
  1275  0130  0DAA               	rlf	___awdiv@quotient+1,f
  1276  0131  3EFF               	addlw	-1
  1277  0132  1D03               	skipz
  1278  0133  292E               	goto	u605
  1279  0134  0823               	movf	___awdiv@divisor+1,w
  1280  0135  0225               	subwf	___awdiv@dividend+1,w
  1281  0136  1D03               	skipz
  1282  0137  293A               	goto	u615
  1283  0138  0822               	movf	___awdiv@divisor,w
  1284  0139  0224               	subwf	___awdiv@dividend,w
  1285  013A                     u615:
  1286  013A  1C03               	skipc
  1287  013B  293D               	goto	u611
  1288  013C  293E               	goto	u610
  1289  013D                     u611:
  1290  013D  2945               	goto	l1210
  1291  013E                     u610:
  1292  013E                     l1206:
  1293  013E  0822               	movf	___awdiv@divisor,w
  1294  013F  02A4               	subwf	___awdiv@dividend,f
  1295  0140  0823               	movf	___awdiv@divisor+1,w
  1296  0141  1C03               	skipc
  1297  0142  03A5               	decf	___awdiv@dividend+1,f
  1298  0143  02A5               	subwf	___awdiv@dividend+1,f
  1299  0144                     l1208:
  1300  0144  1429               	bsf	___awdiv@quotient,0
  1301  0145                     l1210:
  1302  0145  3001               	movlw	1
  1303  0146                     u625:
  1304  0146  1003               	clrc
  1305  0147  0CA3               	rrf	___awdiv@divisor+1,f
  1306  0148  0CA2               	rrf	___awdiv@divisor,f
  1307  0149  3EFF               	addlw	-1
  1308  014A  1D03               	skipz
  1309  014B  2946               	goto	u625
  1310  014C                     l1212:
  1311  014C  3001               	movlw	1
  1312  014D  02A7               	subwf	___awdiv@counter,f
  1313  014E  1D03               	btfss	3,2
  1314  014F  2951               	goto	u631
  1315  0150  2952               	goto	u630
  1316  0151                     u631:
  1317  0151  292D               	goto	l1204
  1318  0152                     u630:
  1319  0152                     l1214:
  1320  0152  0828               	movf	___awdiv@sign,w
  1321  0153  1903               	btfsc	3,2
  1322  0154  2956               	goto	u641
  1323  0155  2957               	goto	u640
  1324  0156                     u641:
  1325  0156  295C               	goto	l1218
  1326  0157                     u640:
  1327  0157                     l1216:
  1328  0157  09A9               	comf	___awdiv@quotient,f
  1329  0158  09AA               	comf	___awdiv@quotient+1,f
  1330  0159  0AA9               	incf	___awdiv@quotient,f
  1331  015A  1903               	skipnz
  1332  015B  0AAA               	incf	___awdiv@quotient+1,f
  1333  015C                     l1218:
  1334  015C  082A               	movf	___awdiv@quotient+1,w
  1335  015D  00A3               	movwf	?___awdiv+1
  1336  015E  0829               	movf	___awdiv@quotient,w
  1337  015F  00A2               	movwf	?___awdiv
  1338  0160                     l343:
  1339  0160  0008               	return
  1340  0161                     __end_of___awdiv:
  1341                           
  1342                           	psect	text5
  1343  023F                     __ptext5:	
  1344 ;; *************** function _Print *****************
  1345 ;; Defined at:
  1346 ;;		line 145 in file "USART.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;  str             1    wreg     PTR unsigned char 
  1349 ;;		 -> STR_6(8), STR_5(18), STR_4(9), STR_3(2), 
  1350 ;;		 -> STR_2(17), STR_1(23), 
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;  str             1    5[COMMON] PTR unsigned char 
  1353 ;;		 -> STR_6(8), STR_5(18), STR_4(9), STR_3(2), 
  1354 ;;		 -> STR_2(17), STR_1(23), 
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  1    wreg      void 
  1357 ;; Registers used:
  1358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1364 ;;      Params:         0       0       0       0       0
  1365 ;;      Locals:         1       0       0       0       0
  1366 ;;      Temps:          1       0       0       0       0
  1367 ;;      Totals:         2       0       0       0       0
  1368 ;;Total ram usage:        2 bytes
  1369 ;; Hardware stack levels used: 1
  1370 ;; Hardware stack levels required when called: 2
  1371 ;; This function calls:
  1372 ;;		_TX
  1373 ;; This function is called by:
  1374 ;;		_main
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378  023F                     _Print:	
  1379                           ;psect for function _Print
  1380                           
  1381                           
  1382                           ;incstack = 0
  1383                           ; Regs used in _Print: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1384                           ;Print@str stored from wreg
  1385  023F  00F5               	movwf	Print@str
  1386  0240                     l990:
  1387                           
  1388                           ;USART.c: 146:         while(*str != '\0'){
  1389  0240  2A51               	goto	l996
  1390  0241                     l992:
  1391                           
  1392                           ;USART.c: 147:             TX(*str);
  1393  0241  0875               	movf	Print@str,w
  1394  0242  0084               	movwf	4
  1395  0243  120A  118A  2161  120A  118A  	fcall	stringdir
  1396  0248  120A  118A  2273  120A  118A  	fcall	_TX
  1397  024D                     l994:
  1398                           
  1399                           ;USART.c: 148:             str++;
  1400  024D  3001               	movlw	1
  1401  024E  00F4               	movwf	??_Print
  1402  024F  0874               	movf	??_Print,w
  1403  0250  07F5               	addwf	Print@str,f
  1404  0251                     l996:
  1405                           
  1406                           ;USART.c: 146:         while(*str != '\0'){
  1407  0251  0875               	movf	Print@str,w
  1408  0252  0084               	movwf	4
  1409  0253  120A  118A  2161  120A  118A  	fcall	stringdir
  1410  0258  3A00               	xorlw	0
  1411  0259  1D03               	skipz
  1412  025A  2A5C               	goto	u271
  1413  025B  2A5D               	goto	u270
  1414  025C                     u271:
  1415  025C  2A41               	goto	l992
  1416  025D                     u270:
  1417  025D                     l98:
  1418  025D  0008               	return
  1419  025E                     __end_of_Print:
  1420                           
  1421                           	psect	text6
  1422  0273                     __ptext6:	
  1423 ;; *************** function _TX *****************
  1424 ;; Defined at:
  1425 ;;		line 152 in file "USART.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;  dato            1    wreg     unsigned char 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  dato            1    3[COMMON] unsigned char 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		wreg
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1439 ;;      Params:         0       0       0       0       0
  1440 ;;      Locals:         1       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0
  1442 ;;      Totals:         1       0       0       0       0
  1443 ;;Total ram usage:        1 bytes
  1444 ;; Hardware stack levels used: 1
  1445 ;; Hardware stack levels required when called: 1
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_main
  1450 ;;		_Print
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454  0273                     _TX:	
  1455                           ;psect for function _TX
  1456                           
  1457                           
  1458                           ;incstack = 0
  1459                           ; Regs used in _TX: [wreg]
  1460                           ;TX@dato stored from wreg
  1461  0273  00F3               	movwf	TX@dato
  1462  0274                     l930:
  1463  0274                     l101:	
  1464                           ;USART.c: 155:         ;
  1465                           
  1466                           
  1467                           ;USART.c: 154:     while(TXSTAbits.TRMT==0)
  1468  0274  1683               	bsf	3,5	;RP0=1, select bank1
  1469  0275  1303               	bcf	3,6	;RP1=0, select bank1
  1470  0276  1C98               	btfss	24,1	;volatile
  1471  0277  2A79               	goto	u261
  1472  0278  2A7A               	goto	u260
  1473  0279                     u261:
  1474  0279  2A74               	goto	l101
  1475  027A                     u260:
  1476  027A                     l932:
  1477                           
  1478                           ;USART.c: 156:         TXREG = dato;
  1479  027A  0873               	movf	TX@dato,w
  1480  027B  1283               	bcf	3,5	;RP0=0, select bank0
  1481  027C  1303               	bcf	3,6	;RP1=0, select bank0
  1482  027D  0099               	movwf	25	;volatile
  1483  027E                     l104:
  1484  027E  0008               	return
  1485  027F                     __end_of_TX:
  1486                           
  1487                           	psect	text7
  1488  021A                     __ptext7:	
  1489 ;; *************** function _isr *****************
  1490 ;; Defined at:
  1491 ;;		line 35 in file "USART.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;		None
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;		None
  1496 ;; Return value:  Size  Location     Type
  1497 ;;                  1    wreg      void 
  1498 ;; Registers used:
  1499 ;;		wreg, status,2, status,0
  1500 ;; Tracked objects:
  1501 ;;		On entry : 0/0
  1502 ;;		On exit  : 0/0
  1503 ;;		Unchanged: 0/0
  1504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1505 ;;      Params:         0       0       0       0       0
  1506 ;;      Locals:         0       0       0       0       0
  1507 ;;      Temps:          3       0       0       0       0
  1508 ;;      Totals:         3       0       0       0       0
  1509 ;;Total ram usage:        3 bytes
  1510 ;; Hardware stack levels used: 1
  1511 ;; This function calls:
  1512 ;;		Nothing
  1513 ;; This function is called by:
  1514 ;;		Interrupt level 1
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518  021A                     _isr:	
  1519                           ;psect for function _isr
  1520                           
  1521  021A                     i1l1070:
  1522                           
  1523                           ;USART.c: 36:     if(PIR1bits.RCIF){
  1524  021A  1283               	bcf	3,5	;RP0=0, select bank0
  1525  021B  1303               	bcf	3,6	;RP1=0, select bank0
  1526  021C  1E8C               	btfss	12,5	;volatile
  1527  021D  2A1F               	goto	u44_21
  1528  021E  2A20               	goto	u44_20
  1529  021F                     u44_21:
  1530  021F  2A26               	goto	i1l67
  1531  0220                     u44_20:
  1532  0220                     i1l1072:
  1533                           
  1534                           ;USART.c: 37:         indice = RCREG;
  1535  0220  081A               	movf	26,w	;volatile
  1536  0221  00F0               	movwf	??_isr
  1537  0222  0870               	movf	??_isr,w
  1538  0223  00B1               	movwf	_indice
  1539  0224                     i1l1074:
  1540                           
  1541                           ;USART.c: 38:         ASCII =0;
  1542  0224  01B0               	clrf	_ASCII
  1543                           
  1544                           ;USART.c: 39:     }
  1545  0225  2A38               	goto	i1l71
  1546  0226                     i1l67:	
  1547                           ;USART.c: 40:     else if(PIR1bits.ADIF){
  1548                           
  1549  0226  1F0C               	btfss	12,6	;volatile
  1550  0227  2A29               	goto	u45_21
  1551  0228  2A2A               	goto	u45_20
  1552  0229                     u45_21:
  1553  0229  2A38               	goto	i1l71
  1554  022A                     u45_20:
  1555  022A                     i1l1076:
  1556                           
  1557                           ;USART.c: 41:         if(ADCON0bits.CHS == 0)
  1558  022A  0C1F               	rrf	31,w	;volatile
  1559  022B  00F0               	movwf	??_isr
  1560  022C  0C70               	rrf	??_isr,w
  1561  022D  390F               	andlw	15
  1562  022E  3A00               	xorlw	0
  1563  022F  1D03               	skipz
  1564  0230  2A32               	goto	u46_21
  1565  0231  2A33               	goto	u46_20
  1566  0232                     u46_21:
  1567  0232  2A37               	goto	i1l1080
  1568  0233                     u46_20:
  1569  0233                     i1l1078:
  1570                           
  1571                           ;USART.c: 42:             pot = ADRESH;
  1572  0233  081E               	movf	30,w	;volatile
  1573  0234  00F0               	movwf	??_isr
  1574  0235  0870               	movf	??_isr,w
  1575  0236  00F7               	movwf	_pot
  1576  0237                     i1l1080:
  1577                           
  1578                           ;USART.c: 43:         PIR1bits.ADIF = 0;
  1579  0237  130C               	bcf	12,6	;volatile
  1580  0238                     i1l71:
  1581  0238  0872               	movf	??_isr+2,w
  1582  0239  008A               	movwf	10
  1583  023A  0E71               	swapf	??_isr+1,w
  1584  023B  0083               	movwf	3
  1585  023C  0EFE               	swapf	btemp,f
  1586  023D  0E7E               	swapf	btemp,w
  1587  023E  0009               	retfie
  1588  023F                     __end_of_isr:
  1589  007E                     btemp	set	126	;btemp
  1590  007E                     wtemp0	set	126
  1591                           
  1592                           	psect	intentry
  1593  0004                     __pintentry:	
  1594                           ;incstack = 0
  1595                           ; Regs used in _isr: [wreg+status,2+status,0]
  1596                           
  1597  0004                     interrupt_function:
  1598  007E                     saved_w	set	btemp
  1599  0004  00FE               	movwf	btemp
  1600  0005  0E03               	swapf	3,w
  1601  0006  00F1               	movwf	??_isr+1
  1602  0007  080A               	movf	10,w
  1603  0008  00F2               	movwf	??_isr+2
  1604  0009  120A  118A  2A1A   	ljmp	_isr
  1605                           
  1606                           	psect	idloc
  1607                           
  1608                           ;Config register IDLOC0 @ 0x2000
  1609                           ;	unspecified, using default values
  1610  2000                     	org	8192
  1611  2000  3FFF               	dw	16383
  1612                           
  1613                           ;Config register IDLOC1 @ 0x2001
  1614                           ;	unspecified, using default values
  1615  2001                     	org	8193
  1616  2001  3FFF               	dw	16383
  1617                           
  1618                           ;Config register IDLOC2 @ 0x2002
  1619                           ;	unspecified, using default values
  1620  2002                     	org	8194
  1621  2002  3FFF               	dw	16383
  1622                           
  1623                           ;Config register IDLOC3 @ 0x2003
  1624                           ;	unspecified, using default values
  1625  2003                     	org	8195
  1626  2003  3FFF               	dw	16383
  1627                           
  1628                           	psect	config
  1629                           
  1630                           ;Config register CONFIG1 @ 0x2007
  1631                           ;	Oscillator Selection bits
  1632                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1633                           ;	Watchdog Timer Enable bit
  1634                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1635                           ;	Power-up Timer Enable bit
  1636                           ;	PWRTE = OFF, PWRT disabled
  1637                           ;	RE3/MCLR pin function select bit
  1638                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1639                           ;	Code Protection bit
  1640                           ;	CP = OFF, Program memory code protection is disabled
  1641                           ;	Data Code Protection bit
  1642                           ;	CPD = OFF, Data memory code protection is disabled
  1643                           ;	Brown Out Reset Selection bits
  1644                           ;	BOREN = OFF, BOR disabled
  1645                           ;	Internal External Switchover bit
  1646                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1647                           ;	Fail-Safe Clock Monitor Enabled bit
  1648                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1649                           ;	Low Voltage Programming Enable bit
  1650                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1651                           ;	In-Circuit Debugger Mode bit
  1652                           ;	DEBUG = 0x1, unprogrammed default
  1653  2007                     	org	8199
  1654  2007  20D4               	dw	8404
  1655                           
  1656                           ;Config register CONFIG2 @ 0x2008
  1657                           ;	Brown-out Reset Selection bit
  1658                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1659                           ;	Flash Program Memory Self Write Enable bits
  1660                           ;	WRT = OFF, Write protection off
  1661  2008                     	org	8200
  1662  2008  3FFF               	dw	16383

Data Sizes:
    Strings     67
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     15      18
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Print@str	PTR unsigned char  size(1) Largest target is 23
		 -> STR_6(CODE[8]), STR_5(CODE[18]), STR_4(CODE[9]), STR_3(CODE[2]), 
		 -> STR_2(CODE[17]), STR_1(CODE[23]), 


Critical Paths under _main in COMMON

    _main->___bmul
    _main->___wmul
    ___awdiv->___wmul
    _Print->_TX

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___awdiv
    ___awdiv->___wmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1652
                                             11 BANK0      4     4      0
                              _Print
                                 _TX
                            ___awdiv
                             ___bmul
                             ___wmul
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     316
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     244
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     805
                                              2 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Print                                                2     2      0     265
                                              4 COMMON     2     2      0
                                 _TX
 ---------------------------------------------------------------------------------
 (1) _TX                                                   1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Print
     _TX
   _TX
   ___awdiv
     ___wmul (ARG)
   ___bmul
   ___wmul
   _setup

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      F      12       5       22.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1D      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Thu May 05 16:16:19 2022

                      pc 0002           ___bmul@product 0075                       l92 01EE  
                     l98 025D                       _TX 0273             ___awdiv@sign 0028  
                     fsr 0004      ___wmul@multiplicand 0075                      ?_TX 0070  
                    l101 0274                      l104 027E                      l216 0272  
                    l190 01FF                      l343 0160                      l192 0219  
                    l930 0274                      l932 027A                      l940 01B5  
                    l950 01BF                      l942 01B6                      l934 01AA  
                    l960 01D1                      l952 01C2                      l944 01B8  
                    l936 01AE                      l970 01DD                      l962 01D4  
                    l954 01C7                      l946 01B9                      l938 01AF  
                    l980 01E8                      l972 01E0                      l964 01D5  
                    l956 01CA                      l948 01BC                      l990 0240  
                    l982 01EB                      l974 01E3                      l966 01D8  
                    l958 01CD                      l992 0241                      l984 01EC  
                    l976 01E4                      l968 01DC                      l994 024D  
                    l986 01ED                      l978 01E7                      l996 0251  
                    u320 0264                      u321 0263                      u330 0271  
                    u331 0270                      u260 027A                      u261 0279  
                    u270 025D                      u510 01F7                      u271 025C  
                    u511 01F6                      u610 013E                      u611 013D  
                    u540 0213                      u605 012E                      u541 0212  
                    u525 0200                      u630 0152                      u550 00FF  
                    u631 0151                      u615 013A                      u551 00FE  
                    u535 0207                      u640 0157                      u560 010A  
                    u641 0156                      u625 0146                      u561 0109  
                    u570 011B                      u650 0027                      u571 011A  
                    u651 0026                      u660 0095                      u661 0094  
                    u590 012D                      u670 00A9                      u591 012C  
                    u671 00A8                      u680 00DC                      u585 011F  
                    u681 00DB                      u697 01CF                      _isr 021A  
                    _pot 0077                      fsr0 0004                     ??_TX 0073  
                   l1020 026A                     l1012 025F                     l1022 0271  
                   l1014 0260                     l1200 0125                     l1016 0264  
                   l1210 0145                     l1202 0129                     l1018 0268  
                   l1212 014C                     l1204 012D                     l1206 013E  
                   l1214 0152                     l1302 00ED                     l1230 0084  
                   l1222 001C                     l1216 0157                     l1208 0144  
                   l1240 00A1                     l1232 0088                     l1224 0021  
                   l1218 015C                     l1170 0206                     l1250 00B6  
                   l1242 00A5                     l1234 008C                     l1226 0027  
                   l1180 00FB                     l1172 020D                     l1164 01EF  
                   l1260 00CD                     l1252 00BC                     l1236 0090  
                   l1228 0028                     l1190 010F                     l1182 00FF  
                   l1174 0213                     l1166 01F3                     l1262 00D3  
                   l1254 00C2                     l1246 00AA                     l1238 0095  
                   l1192 0113                     l1184 0104                     l1168 01F7  
                   l1264 00D7                     l1256 00C8                     l1248 00B0  
                   l1194 0115                     l1186 0106                     l1178 00F8  
                   l1266 00DC                     l1258 00CB                     l1196 011B  
                   l1188 010A                     l1268 00DE                     l1276 00E5  
                   l1198 011E                     ?_isr 0070                     STR_1 0167  
                   STR_2 0190                     STR_3 01A8                     STR_4 01A1  
                   STR_5 017E                     STR_6 01A2                     i1l71 0238  
                   i1l67 0226                     _main 001C                     btemp 007E  
                   start 000C        ___bmul@multiplier 0076                    ??_isr 0070  
                  ?_main 0070          __end_of___awdiv 0161                    _ASCII 0030  
                  _ANSEL 0188          ___awdiv@divisor 0022          ___awdiv@counter 0027  
                  _RCREG 001A                    _SPBRG 0099                    _PORTA 0005  
                  _PORTD 0008                    u44_20 0220                    u44_21 021F  
                  u45_20 022A                    u45_21 0229                    u46_20 0233  
                  u46_21 0232                    _TRISA 0085                    _TRISD 0088  
                  _TXREG 0019                    _Print 023F                    _setup 01AA  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000F             __end_of_main 00F8                   ??_main 002B  
                 ?_Print 0070                   _ADRESH 001E         ___awdiv@dividend 0024  
                 ?_setup 0070                   _ANSELH 0189                   TX@dato 0073  
                 i1l1070 021A                   i1l1080 0237                   i1l1072 0220  
                 i1l1074 0224                   i1l1076 022A                   i1l1078 0233  
                 _SPBRGH 009A                   ___bmul 025E                   ___wmul 01EF  
              ??___awdiv 0026                   _decena 0079                   _indice 0031  
                 _inicio 002F         ___awdiv@quotient 0029                   _unidad 007A  
                 saved_w 007E  __end_of__initialization 0018      ___bmul@multiplicand 0073  
         __pcstackCOMMON 0070            __end_of_Print 025E            __end_of_setup 01EF  
             __end_of_TX 027F                  ??_Print 0074                  ??_setup 0073  
             __pbssBANK0 002F               __pmaintext 001C                  ?___bmul 0073  
                ?___wmul 0073               __pintentry 0004               __stringtab 0161  
                ___awdiv 00F8                  _centena 0078                  __ptext1 01AA  
                __ptext2 01EF                  __ptext3 025E                  __ptext4 00F8  
                __ptext5 023F                  __ptext6 0273                  __ptext7 021A  
   end_of_initialization 0018                _RCSTAbits 0018                _TXSTAbits 0098  
         __end_of___bmul 0273           __end_of___wmul 021A              _BAUDCTLbits 0187  
    start_initialization 000F              __end_of_isr 023F                 ??___bmul 0074  
               ??___wmul 0077              __pbssCOMMON 0077                ___latbits 0002  
          __pcstackBANK0 0020                 ?___awdiv 0022                __pstrings 0161  
      interrupt_function 0004           ___wmul@product 0020                 _PIE1bits 008C  
               _PIR1bits 000C               _ADCON0bits 001F              __stringbase 0166  
             _ADCON1bits 009F        ___wmul@multiplier 0073                 Print@str 0075  
     __end_of__stringtab 0167               _INTCONbits 000B                 intlevel1 0000  
              stringcode 0161               _OSCCONbits 008F                 stringdir 0161  
               stringtab 0161  
