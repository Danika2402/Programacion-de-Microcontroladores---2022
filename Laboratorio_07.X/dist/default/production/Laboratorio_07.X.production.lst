

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Sun Apr 03 23:53:32 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.40
    19                           ; Generated 17/11/2021 GMT
    20                           ; 
    21                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209                           
   210                           	psect	strings
   211  00B2                     __pstrings:
   212  00B2                     stringtab:
   213  00B2                     __stringtab:
   214  00B2                     stringcode:	
   215                           ;	String table - string pointers are 1 byte each
   216                           
   217  00B2                     stringdir:
   218  00B2  3000               	movlw	high stringdir
   219  00B3  008A               	movwf	10
   220  00B4  0804               	movf	4,w
   221  00B5  0A84               	incf	4,f
   222  00B6  0782               	addwf	2,f
   223  00B7                     __stringbase:
   224  00B7  3400               	retlw	0
   225  00B8                     __end_of__stringtab:
   226  00B8                     _tabla:
   227  00B8  34FC               	retlw	252
   228  00B9  3460               	retlw	96
   229  00BA  34DA               	retlw	218
   230  00BB  34F2               	retlw	242
   231  00BC  3466               	retlw	102
   232  00BD  34B6               	retlw	182
   233  00BE  34BE               	retlw	190
   234  00BF  34E0               	retlw	224
   235  00C0  34FE               	retlw	254
   236  00C1  34F6               	retlw	246
   237  00C2  34EE               	retlw	238
   238  00C3  343E               	retlw	62
   239  00C4  349C               	retlw	156
   240  00C5  347A               	retlw	122
   241  00C6  349E               	retlw	158
   242  00C7  348E               	retlw	142
   243  00C8                     __end_of_tabla:
   244                           
   245                           	psect	nvCOMMON
   246  0079                     __pnvCOMMON:
   247  0079                     _centena:
   248  0079                     	ds	1
   249  0006                     _PORTB	set	6
   250  0005                     _PORTA	set	5
   251  0001                     _TMR0	set	1
   252  0007                     _PORTC	set	7
   253  0008                     _PORTD	set	8
   254  0006                     _PORTBbits	set	6
   255  000B                     _INTCONbits	set	11
   256  0040                     _RD0	set	64
   257  0041                     _RD1	set	65
   258  0042                     _RD2	set	66
   259  0096                     _IOCBbits	set	150
   260  0095                     _WPUBbits	set	149
   261  0081                     _OPTION_REGbits	set	129
   262  0086                     _TRISBbits	set	134
   263  0088                     _TRISD	set	136
   264  0087                     _TRISC	set	135
   265  0085                     _TRISA	set	133
   266  008F                     _OSCCONbits	set	143
   267  0189                     _ANSELH	set	393
   268  0188                     _ANSEL	set	392
   269                           
   270                           	psect	cinit
   271  0013                     start_initialization:	
   272                           ; #config settings
   273                           
   274  0013                     __initialization:
   275                           
   276                           ; Clear objects allocated to COMMON
   277  0013  01F5               	clrf	__pbssCOMMON& (0+127)
   278  0014  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   279  0015  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   280  0016  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   281  0017                     end_of_initialization:	
   282                           ;End of C runtime variable initialization code
   283                           
   284  0017                     __end_of__initialization:
   285  0017  0183               	clrf	3
   286  0018  120A  118A  28C8   	ljmp	_main	;jump to C main() function
   287                           
   288                           	psect	bssCOMMON
   289  0075                     __pbssCOMMON:
   290  0075                     _dividir:
   291  0075                     	ds	1
   292  0076                     _display:
   293  0076                     	ds	1
   294  0077                     _decena:
   295  0077                     	ds	1
   296  0078                     _unidad:
   297  0078                     	ds	1
   298                           
   299                           	psect	cstackCOMMON
   300  0070                     __pcstackCOMMON:
   301  0070                     ?_setup:
   302  0070                     ?_isr:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ??_isr:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?_main:	
   309                           ; 1 bytes @ 0x0
   310                           
   311                           
   312                           ; 1 bytes @ 0x0
   313  0070                     	ds	5
   314                           
   315                           	psect	cstackBANK0
   316  0020                     __pcstackBANK0:
   317  0020                     ??_setup:
   318  0020                     ??_main:	
   319                           ; 1 bytes @ 0x0
   320                           
   321                           
   322                           ; 1 bytes @ 0x0
   323  0020                     	ds	1
   324                           
   325                           	psect	maintext
   326  00C8                     __pmaintext:	
   327 ;;
   328 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   329 ;;
   330 ;; *************** function _main *****************
   331 ;; Defined at:
   332 ;;		line 66 in file "Codigo_C.c"
   333 ;; Parameters:    Size  Location     Type
   334 ;;		None
   335 ;; Auto vars:     Size  Location     Type
   336 ;;		None
   337 ;; Return value:  Size  Location     Type
   338 ;;                  1    wreg      void 
   339 ;; Registers used:
   340 ;;		wreg, status,2, status,0, pclath, cstack
   341 ;; Tracked objects:
   342 ;;		On entry : B00/0
   343 ;;		On exit  : 0/0
   344 ;;		Unchanged: 0/0
   345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   346 ;;      Params:         0       0       0       0       0
   347 ;;      Locals:         0       0       0       0       0
   348 ;;      Temps:          0       1       0       0       0
   349 ;;      Totals:         0       1       0       0       0
   350 ;;Total ram usage:        1 bytes
   351 ;; Hardware stack levels required when called: 3
   352 ;; This function calls:
   353 ;;		_setup
   354 ;; This function is called by:
   355 ;;		Startup code after reset
   356 ;; This function uses a non-reentrant model
   357 ;;
   358                           
   359  00C8                     _main:	
   360                           ;psect for function _main
   361                           
   362  00C8                     l872:	
   363                           ;incstack = 0
   364                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   365                           
   366                           
   367                           ;Codigo_C.c: 67:     setup();
   368  00C8  120A  118A  2084  120A  118A  	fcall	_setup
   369  00CD                     l874:
   370                           
   371                           ;Codigo_C.c: 70:         PORTA = dividir;
   372  00CD  0875               	movf	_dividir,w
   373  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   374  00CF  1303               	bcf	3,6	;RP1=0, select bank0
   375  00D0  0085               	movwf	5	;volatile
   376  00D1                     l876:
   377                           
   378                           ;Codigo_C.c: 71:         centena = dividir;
   379  00D1  0875               	movf	_dividir,w
   380  00D2  00A0               	movwf	??_main
   381  00D3  0820               	movf	??_main,w
   382  00D4  00F9               	movwf	_centena
   383  00D5  28CD               	goto	l874
   384  00D6  120A  118A  2810   	ljmp	start
   385  00D9                     __end_of_main:
   386                           
   387                           	psect	text1
   388  0084                     __ptext1:	
   389 ;; *************** function _setup *****************
   390 ;; Defined at:
   391 ;;		line 78 in file "Codigo_C.c"
   392 ;; Parameters:    Size  Location     Type
   393 ;;		None
   394 ;; Auto vars:     Size  Location     Type
   395 ;;		None
   396 ;; Return value:  Size  Location     Type
   397 ;;                  1    wreg      void 
   398 ;; Registers used:
   399 ;;		wreg, status,2, status,0
   400 ;; Tracked objects:
   401 ;;		On entry : 0/0
   402 ;;		On exit  : 0/0
   403 ;;		Unchanged: 0/0
   404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   405 ;;      Params:         0       0       0       0       0
   406 ;;      Locals:         0       0       0       0       0
   407 ;;      Temps:          0       0       0       0       0
   408 ;;      Totals:         0       0       0       0       0
   409 ;;Total ram usage:        0 bytes
   410 ;; Hardware stack levels used: 1
   411 ;; Hardware stack levels required when called: 2
   412 ;; This function calls:
   413 ;;		Nothing
   414 ;; This function is called by:
   415 ;;		_main
   416 ;; This function uses a non-reentrant model
   417 ;;
   418                           
   419  0084                     _setup:	
   420                           ;psect for function _setup
   421                           
   422  0084                     l820:	
   423                           ;incstack = 0
   424                           ; Regs used in _setup: [wreg+status,2+status,0]
   425                           
   426                           
   427                           ;Codigo_C.c: 80:     ANSEL = 0x00;
   428  0084  1683               	bsf	3,5	;RP0=1, select bank3
   429  0085  1703               	bsf	3,6	;RP1=1, select bank3
   430  0086  0188               	clrf	8	;volatile
   431                           
   432                           ;Codigo_C.c: 81:     ANSELH = 0x00;
   433  0087  0189               	clrf	9	;volatile
   434  0088                     l822:
   435                           
   436                           ;Codigo_C.c: 83:     OSCCONbits.IRCF = 0b0100;
   437  0088  1683               	bsf	3,5	;RP0=1, select bank1
   438  0089  1303               	bcf	3,6	;RP1=0, select bank1
   439  008A  080F               	movf	15,w	;volatile
   440  008B  398F               	andlw	-113
   441  008C  3840               	iorlw	64
   442  008D  008F               	movwf	15	;volatile
   443  008E                     l824:
   444                           
   445                           ;Codigo_C.c: 84:     OSCCONbits.SCS = 1;
   446  008E  140F               	bsf	15,0	;volatile
   447  008F                     l826:
   448                           
   449                           ;Codigo_C.c: 86:     TRISA = 0x00;
   450  008F  0185               	clrf	5	;volatile
   451  0090                     l828:
   452                           
   453                           ;Codigo_C.c: 87:     TRISC = 0x00;
   454  0090  0187               	clrf	7	;volatile
   455  0091                     l830:
   456                           
   457                           ;Codigo_C.c: 88:     TRISD = 0x00;
   458  0091  0188               	clrf	8	;volatile
   459  0092                     l832:
   460                           
   461                           ;Codigo_C.c: 90:     PORTA = 0x00;
   462  0092  1283               	bcf	3,5	;RP0=0, select bank0
   463  0093  1303               	bcf	3,6	;RP1=0, select bank0
   464  0094  0185               	clrf	5	;volatile
   465  0095                     l834:
   466                           
   467                           ;Codigo_C.c: 91:     PORTB = 0x00;
   468  0095  0186               	clrf	6	;volatile
   469  0096                     l836:
   470                           
   471                           ;Codigo_C.c: 92:     PORTC = 0x00;
   472  0096  0187               	clrf	7	;volatile
   473  0097                     l838:
   474                           
   475                           ;Codigo_C.c: 93:     PORTD = 0x00;
   476  0097  0188               	clrf	8	;volatile
   477  0098                     l840:
   478                           
   479                           ;Codigo_C.c: 95:     unidad = 0x00;
   480  0098  01F8               	clrf	_unidad
   481  0099                     l842:
   482                           
   483                           ;Codigo_C.c: 96:     decena = 0x00;
   484  0099  01F7               	clrf	_decena
   485  009A                     l844:
   486                           
   487                           ;Codigo_C.c: 97:     centena = 0x00;
   488  009A  01F9               	clrf	_centena
   489  009B                     l846:
   490                           
   491                           ;Codigo_C.c: 98:     display = 0x00;
   492  009B  01F6               	clrf	_display
   493  009C                     l848:
   494                           
   495                           ;Codigo_C.c: 100:     TRISBbits.TRISB0 = 1;
   496  009C  1683               	bsf	3,5	;RP0=1, select bank1
   497  009D  1303               	bcf	3,6	;RP1=0, select bank1
   498  009E  1406               	bsf	6,0	;volatile
   499  009F                     l850:
   500                           
   501                           ;Codigo_C.c: 101:     TRISBbits.TRISB1 = 1;
   502  009F  1486               	bsf	6,1	;volatile
   503  00A0                     l852:
   504                           
   505                           ;Codigo_C.c: 102:     OPTION_REGbits.nRBPU = 0;
   506  00A0  1381               	bcf	1,7	;volatile
   507  00A1                     l854:
   508                           
   509                           ;Codigo_C.c: 103:     WPUBbits.WPUB = 0x03;
   510  00A1  3003               	movlw	3
   511  00A2  0095               	movwf	21	;volatile
   512  00A3                     l856:
   513                           
   514                           ;Codigo_C.c: 104:     IOCBbits.IOCB = 0x03;
   515  00A3  3003               	movlw	3
   516  00A4  0096               	movwf	22	;volatile
   517  00A5                     l858:
   518                           
   519                           ;Codigo_C.c: 106:     OPTION_REGbits.T0CS = 0;
   520  00A5  1281               	bcf	1,5	;volatile
   521                           
   522                           ;Codigo_C.c: 107:     OPTION_REGbits.PS = 0b0111;
   523  00A6  3007               	movlw	7
   524  00A7  0481               	iorwf	1,f	;volatile
   525  00A8                     l860:
   526                           
   527                           ;Codigo_C.c: 112:     TMR0 = 159;
   528  00A8  309F               	movlw	159
   529  00A9  1283               	bcf	3,5	;RP0=0, select bank0
   530  00AA  1303               	bcf	3,6	;RP1=0, select bank0
   531  00AB  0081               	movwf	1	;volatile
   532  00AC                     l862:
   533                           
   534                           ;Codigo_C.c: 114:     INTCONbits.GIE = 1;
   535  00AC  178B               	bsf	11,7	;volatile
   536  00AD                     l864:
   537                           
   538                           ;Codigo_C.c: 115:     INTCONbits.RBIE = 1;
   539  00AD  158B               	bsf	11,3	;volatile
   540  00AE                     l866:
   541                           
   542                           ;Codigo_C.c: 116:     INTCONbits.RBIF = 0;
   543  00AE  100B               	bcf	11,0	;volatile
   544  00AF                     l868:
   545                           
   546                           ;Codigo_C.c: 117:     INTCONbits.T0IF = 0;
   547  00AF  110B               	bcf	11,2	;volatile
   548  00B0                     l870:
   549                           
   550                           ;Codigo_C.c: 118:     INTCONbits.T0IE = 1;
   551  00B0  168B               	bsf	11,5	;volatile
   552  00B1                     l82:
   553  00B1  0008               	return
   554  00B2                     __end_of_setup:
   555                           
   556                           	psect	text2
   557  001B                     __ptext2:	
   558 ;; *************** function _isr *****************
   559 ;; Defined at:
   560 ;;		line 35 in file "Codigo_C.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;		None
   563 ;; Auto vars:     Size  Location     Type
   564 ;;		None
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   574 ;;      Params:         0       0       0       0       0
   575 ;;      Locals:         0       0       0       0       0
   576 ;;      Temps:          5       0       0       0       0
   577 ;;      Totals:         5       0       0       0       0
   578 ;;Total ram usage:        5 bytes
   579 ;; Hardware stack levels used: 2
   580 ;; This function calls:
   581 ;;		Nothing
   582 ;; This function is called by:
   583 ;;		Interrupt level 1
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587  001B                     _isr:	
   588                           ;psect for function _isr
   589                           
   590  001B                     i1l776:
   591                           
   592                           ;Codigo_C.c: 36:     if(INTCONbits.RBIF){
   593  001B  1C0B               	btfss	11,0	;volatile
   594  001C  281E               	goto	u9_21
   595  001D  281F               	goto	u9_20
   596  001E                     u9_21:
   597  001E  2831               	goto	i1l59
   598  001F                     u9_20:
   599  001F                     i1l778:
   600                           
   601                           ;Codigo_C.c: 37:         if (!PORTBbits.RB0)
   602  001F  1283               	bcf	3,5	;RP0=0, select bank0
   603  0020  1303               	bcf	3,6	;RP1=0, select bank0
   604  0021  1806               	btfsc	6,0	;volatile
   605  0022  2824               	goto	u10_21
   606  0023  2825               	goto	u10_20
   607  0024                     u10_21:
   608  0024  2829               	goto	i1l782
   609  0025                     u10_20:
   610  0025                     i1l780:
   611                           
   612                           ;Codigo_C.c: 38:             ++dividir;
   613  0025  3001               	movlw	1
   614  0026  00F0               	movwf	??_isr
   615  0027  0870               	movf	??_isr,w
   616  0028  07F5               	addwf	_dividir,f
   617  0029                     i1l782:
   618                           
   619                           ;Codigo_C.c: 39:         if(!PORTBbits.RB1)
   620  0029  1886               	btfsc	6,1	;volatile
   621  002A  282C               	goto	u11_21
   622  002B  282D               	goto	u11_20
   623  002C                     u11_21:
   624  002C  282F               	goto	i1l786
   625  002D                     u11_20:
   626  002D                     i1l784:
   627                           
   628                           ;Codigo_C.c: 40:             --dividir;
   629  002D  3001               	movlw	1
   630  002E  02F5               	subwf	_dividir,f
   631  002F                     i1l786:
   632                           
   633                           ;Codigo_C.c: 41:         INTCONbits.RBIF = 0;
   634  002F  100B               	bcf	11,0	;volatile
   635                           
   636                           ;Codigo_C.c: 42:     }
   637  0030  2879               	goto	i1l71
   638  0031                     i1l59:	
   639                           ;Codigo_C.c: 44:     else if(INTCONbits.T0IF){
   640                           
   641  0031  1D0B               	btfss	11,2	;volatile
   642  0032  2834               	goto	u12_21
   643  0033  2835               	goto	u12_20
   644  0034                     u12_21:
   645  0034  2879               	goto	i1l71
   646  0035                     u12_20:
   647  0035                     i1l788:
   648                           
   649                           ;Codigo_C.c: 45:         PORTD = 0;
   650  0035  1283               	bcf	3,5	;RP0=0, select bank0
   651  0036  1303               	bcf	3,6	;RP1=0, select bank0
   652  0037  0188               	clrf	8	;volatile
   653  0038                     i1l790:
   654                           
   655                           ;Codigo_C.c: 47:         if(display==1){
   656  0038  0376               	decf	_display,w
   657  0039  1D03               	btfss	3,2
   658  003A  283C               	goto	u13_21
   659  003B  283D               	goto	u13_20
   660  003C                     u13_21:
   661  003C  2848               	goto	i1l796
   662  003D                     u13_20:
   663  003D                     i1l792:
   664                           
   665                           ;Codigo_C.c: 48:             RD2 = 1;
   666  003D  1508               	bsf	8,2	;volatile
   667  003E                     i1l794:
   668                           
   669                           ;Codigo_C.c: 49:             PORTC = (tabla[unidad]);
   670  003E  0878               	movf	_unidad,w
   671  003F  3E01               	addlw	low ((_tabla-__stringbase)| (0+32768))
   672  0040  0084               	movwf	4
   673  0041  120A  118A  20B2  120A  118A  	fcall	stringdir
   674  0046  0087               	movwf	7	;volatile
   675                           
   676                           ;Codigo_C.c: 50:         }else if(display==2){
   677  0047  2872               	goto	i1l812
   678  0048                     i1l796:
   679  0048  3002               	movlw	2
   680  0049  0676               	xorwf	_display,w
   681  004A  1D03               	btfss	3,2
   682  004B  284D               	goto	u14_21
   683  004C  284E               	goto	u14_20
   684  004D                     u14_21:
   685  004D  2859               	goto	i1l802
   686  004E                     u14_20:
   687  004E                     i1l798:
   688                           
   689                           ;Codigo_C.c: 51:             RD1 = 1;
   690  004E  1488               	bsf	8,1	;volatile
   691  004F                     i1l800:
   692                           
   693                           ;Codigo_C.c: 52:             PORTC = (tabla[decena]);
   694  004F  0877               	movf	_decena,w
   695  0050  3E01               	addlw	low ((_tabla-__stringbase)| (0+32768))
   696  0051  0084               	movwf	4
   697  0052  120A  118A  20B2  120A  118A  	fcall	stringdir
   698  0057  0087               	movwf	7	;volatile
   699                           
   700                           ;Codigo_C.c: 53:         }else if(display ==3){
   701  0058  2872               	goto	i1l812
   702  0059                     i1l802:
   703  0059  3003               	movlw	3
   704  005A  0676               	xorwf	_display,w
   705  005B  1D03               	btfss	3,2
   706  005C  285E               	goto	u15_21
   707  005D  285F               	goto	u15_20
   708  005E                     u15_21:
   709  005E  286A               	goto	i1l808
   710  005F                     u15_20:
   711  005F                     i1l804:
   712                           
   713                           ;Codigo_C.c: 54:             RD0 = 1;
   714  005F  1408               	bsf	8,0	;volatile
   715  0060                     i1l806:
   716                           
   717                           ;Codigo_C.c: 55:             PORTC = (tabla[centena]);
   718  0060  0879               	movf	_centena,w
   719  0061  3E01               	addlw	low ((_tabla-__stringbase)| (0+32768))
   720  0062  0084               	movwf	4
   721  0063  120A  118A  20B2  120A  118A  	fcall	stringdir
   722  0068  0087               	movwf	7	;volatile
   723                           
   724                           ;Codigo_C.c: 56:         }else if(display == 4){
   725  0069  2872               	goto	i1l812
   726  006A                     i1l808:
   727  006A  3004               	movlw	4
   728  006B  0676               	xorwf	_display,w
   729  006C  1D03               	btfss	3,2
   730  006D  286F               	goto	u16_21
   731  006E  2870               	goto	u16_20
   732  006F                     u16_21:
   733  006F  2872               	goto	i1l67
   734  0070                     u16_20:
   735  0070                     i1l810:
   736                           
   737                           ;Codigo_C.c: 57:             display = 0;
   738  0070  01F6               	clrf	_display
   739  0071  2872               	goto	i1l812
   740  0072                     i1l67:
   741  0072                     i1l812:
   742                           
   743                           ;Codigo_C.c: 59:         ++display;
   744  0072  3001               	movlw	1
   745  0073  00F0               	movwf	??_isr
   746  0074  0870               	movf	??_isr,w
   747  0075  07F6               	addwf	_display,f
   748  0076                     i1l814:
   749                           
   750                           ;Codigo_C.c: 60:         INTCONbits.T0IF = 0;
   751  0076  110B               	bcf	11,2	;volatile
   752  0077                     i1l816:
   753                           
   754                           ;Codigo_C.c: 61:         TMR0 = 159;
   755  0077  309F               	movlw	159
   756  0078  0081               	movwf	1	;volatile
   757  0079                     i1l71:
   758  0079  0874               	movf	??_isr+4,w
   759  007A  00FF               	movwf	btemp+1
   760  007B  0873               	movf	??_isr+3,w
   761  007C  008A               	movwf	10
   762  007D  0872               	movf	??_isr+2,w
   763  007E  0084               	movwf	4
   764  007F  0E71               	swapf	??_isr+1,w
   765  0080  0083               	movwf	3
   766  0081  0EFE               	swapf	btemp,f
   767  0082  0E7E               	swapf	btemp,w
   768  0083  0009               	retfie
   769  0084                     __end_of_isr:
   770  007E                     btemp	set	126	;btemp
   771  007E                     wtemp0	set	126
   772                           
   773                           	psect	intentry
   774  0004                     __pintentry:	
   775                           ;incstack = 0
   776                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath]
   777                           
   778  0004                     interrupt_function:
   779  007E                     saved_w	set	btemp
   780  0004  00FE               	movwf	btemp
   781  0005  0E03               	swapf	3,w
   782  0006  00F1               	movwf	??_isr+1
   783  0007  0804               	movf	4,w
   784  0008  00F2               	movwf	??_isr+2
   785  0009  080A               	movf	10,w
   786  000A  00F3               	movwf	??_isr+3
   787  000B  087F               	movf	btemp+1,w
   788  000C  00F4               	movwf	??_isr+4
   789  000D  120A  118A  281B   	ljmp	_isr
   790                           
   791                           	psect	idloc
   792                           
   793                           ;Config register IDLOC0 @ 0x2000
   794                           ;	unspecified, using default values
   795  2000                     	org	8192
   796  2000  3FFF               	dw	16383
   797                           
   798                           ;Config register IDLOC1 @ 0x2001
   799                           ;	unspecified, using default values
   800  2001                     	org	8193
   801  2001  3FFF               	dw	16383
   802                           
   803                           ;Config register IDLOC2 @ 0x2002
   804                           ;	unspecified, using default values
   805  2002                     	org	8194
   806  2002  3FFF               	dw	16383
   807                           
   808                           ;Config register IDLOC3 @ 0x2003
   809                           ;	unspecified, using default values
   810  2003                     	org	8195
   811  2003  3FFF               	dw	16383
   812                           
   813                           	psect	config
   814                           
   815                           ;Config register CONFIG1 @ 0x2007
   816                           ;	Oscillator Selection bits
   817                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   818                           ;	Watchdog Timer Enable bit
   819                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   820                           ;	Power-up Timer Enable bit
   821                           ;	PWRTE = OFF, PWRT disabled
   822                           ;	RE3/MCLR pin function select bit
   823                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   824                           ;	Code Protection bit
   825                           ;	CP = OFF, Program memory code protection is disabled
   826                           ;	Data Code Protection bit
   827                           ;	CPD = OFF, Data memory code protection is disabled
   828                           ;	Brown Out Reset Selection bits
   829                           ;	BOREN = OFF, BOR disabled
   830                           ;	Internal External Switchover bit
   831                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   832                           ;	Fail-Safe Clock Monitor Enabled bit
   833                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   834                           ;	Low Voltage Programming Enable bit
   835                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   836                           ;	In-Circuit Debugger Mode bit
   837                           ;	DEBUG = 0x1, unprogrammed default
   838  2007                     	org	8199
   839  2007  20D4               	dw	8404
   840                           
   841                           ;Config register CONFIG2 @ 0x2008
   842                           ;	Brown-out Reset Selection bit
   843                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   844                           ;	Flash Program Memory Self Write Enable bits
   845                           ;	WRT = OFF, Write protection off
   846  2008                     	org	8200
   847  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         4
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80      1       1
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              0 BANK0      1     1      0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      1       1       5        1.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       B      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Sun Apr 03 23:53:32 2022

                      pc 0002                       l82 00B1                       fsr 0004  
                    l820 0084                      l830 0091                      l822 0088  
                    l840 0098                      l832 0092                      l824 008E  
                    l850 009F                      l842 0099                      l834 0095  
                    l826 008F                      l860 00A8                      l852 00A0  
                    l844 009A                      l836 0096                      l828 0090  
                    l870 00B0                      l862 00AC                      l854 00A1  
                    l846 009B                      l838 0097                      l864 00AD  
                    l856 00A3                      l848 009C                      l872 00C8  
                    l866 00AE                      l858 00A5                      l874 00CD  
                    l868 00AF                      l876 00D1                      _RD0 0040  
                    _RD1 0041                      _RD2 0042                      _isr 001B  
                    fsr0 0004                     ?_isr 0070                     i1l71 0079  
                   i1l67 0072                     i1l59 0031                     _TMR0 0001  
                   u9_20 001F                     u9_21 001E                     _main 00C8  
                   btemp 007E                     start 0010                    ??_isr 0070  
                  ?_main 0070                    _ANSEL 0188                    i1l800 004F  
                  i1l810 0070                    i1l802 0059                    i1l804 005F  
                  i1l812 0072                    i1l814 0076                    i1l806 0060  
                  i1l816 0077                    i1l808 006A                    i1l780 0025  
                  i1l790 0038                    i1l782 0029                    i1l792 003D  
                  i1l784 002D                    i1l776 001B                    i1l794 003E  
                  i1l786 002F                    i1l778 001F                    i1l796 0048  
                  i1l788 0035                    i1l798 004E                    u10_20 0025  
                  u10_21 0024                    u11_20 002D                    u11_21 002C  
                  u12_20 0035                    u12_21 0034                    u13_20 003D  
                  u13_21 003C                    u14_20 004E                    u14_21 004D  
                  u15_20 005F                    u15_21 005E                    u16_20 0070  
                  u16_21 006F                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _PORTD 0008                    _TRISA 0085  
                  _TRISC 0087                    _TRISD 0088                    _tabla 00B8  
                  _setup 0084                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 0013             __end_of_main 00D9  
                 ??_main 0020                   ?_setup 0070                   _ANSELH 0189  
                 _decena 0077                   _unidad 0078                   saved_w 007E  
__end_of__initialization 0017           __pcstackCOMMON 0070            __end_of_tabla 00C8  
          __end_of_setup 00B2           _OPTION_REGbits 0081                  ??_setup 0020  
             __pnvCOMMON 0079               __pmaintext 00C8               __pintentry 0004  
             __stringtab 00B2                  _centena 0079                  __ptext1 0084  
                __ptext2 001B                  _dividir 0075                  _display 0076  
   end_of_initialization 0017                _PORTBbits 0006                _TRISBbits 0086  
    start_initialization 0013              __end_of_isr 0084              __pbssCOMMON 0075  
              ___latbits 0002            __pcstackBANK0 0020                __pstrings 00B2  
      interrupt_function 0004                 _IOCBbits 0096              __stringbase 00B7  
               _WPUBbits 0095       __end_of__stringtab 00B8               _INTCONbits 000B  
               intlevel1 0000                stringcode 00B2               _OSCCONbits 008F  
               stringdir 00B2                 stringtab 00B2  
